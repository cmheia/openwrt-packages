#!/bin/sh /etc/rc.common
#
# Copyright (C) 2018 cmheia <cmheia@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

# https://openwrt.org/docs/guide-developer/procd-init-scripts
START=75

USE_PROCD=1

DEFAULT_USER_NAME=ftp
DEFAULT_USER_GROUP=ftp
DEFAULT_USER_CONFIG=/etc/vsftpd/vsftpd.conf.user
DEFAULT_VUSER_PWD="123"
ftp_usergroup=ftp

NAME=vsftpd
DAEMON=/usr/sbin/${NAME}

VAR_DIR=/var/run/${NAME}
CONF_FILE=$VAR_DIR/${NAME}.conf
VUSER_LIST=$VAR_DIR/vusers.txt
VUSER_DB=$VAR_DIR/vusers
VUSER_PAM=$VAR_DIR/${NAME}.vu
VUSER_PAM_SYMLINK=/etc/pam.d/${NAME}.vu
VUSER_CONF_DIR=$VAR_DIR/users
CHROOT_DIR=$VAR_DIR/empty

bool_2_yesno()
{
	if [ "$1" = 1 ]; then
		echo YES
	else
		echo NO
	fi
}

get_value()
{
	local opt=$1
	local def=$2
	local val

	config_get val "${NAME}" "${opt}" "${def}"

	# echo "val:${val},NAME:${NAME},opt:${opt},def:${def}">/dev/console
	echo "${val}"
}

# <key> <value>
conf_append_val()
{
	local key=$1
	local val=$2

	echo "$key=$val" >> "${CONF_FILE}"
}

# <option> [<default>]
conf_translate_val()
{
	local val

	val=$(get_value "$1" "$2")

	[ -z "${val}" ] || conf_append_val "$1" "$val"
}

# <option> [<default>]
conf_translate_bool()
{
	local val

	val=$(get_value "$1" "$2")

	if [ -n "${val}" ]; then
		val=$(bool_2_yesno $val)
		conf_append_val "$1" "$val"
	fi
}

# <user> <key> <value>
user_append_val ()
{
	local key=$2
	local val=$3

	# echo "$key=$val -> ${VUSER_CONF_DIR}/$1">/dev/console
	echo "$key=$val" >> "${VUSER_CONF_DIR}/$1"
}

init_common()
{
	# listen
	conf_translate_val listen_port
	conf_translate_val ftp_data_port

	# global
	conf_translate_val ftpd_banner
	conf_translate_bool write_enable
	conf_translate_bool download_enable
	conf_translate_bool dirlist_enable
	conf_translate_bool ls_recurse_enable
	conf_translate_bool force_dot_files
	conf_translate_val local_umask

	conf_translate_bool dirmessage_enable
	conf_translate_val message_file

	# connection
	conf_translate_bool port_enable
	conf_translate_bool pasv_enable

	ascii_download=NO
	ascii_upload=NO
	case $(get_value ascii) in
	download)
		ascii_download=YES
	;;
	upload)
		ascii_upload=YES
	;;
	both)
		ascii_download=YES
		ascii_upload=YES
	esac
	conf_append_val ascii_download_enable ${ascii_download}
	conf_append_val ascii_upload_enable ${ascii_upload}

	conf_translate_val connect_timeout
	conf_translate_val data_connection_timeout
	conf_translate_val idle_session_timeout
	conf_translate_val max_clients
	conf_translate_val max_per_ip
	conf_translate_val local_max_rate
	conf_translate_val max_login_fails

	# anonymous
	anon_enable=$(get_value anon_enable 0)
	if [ "${anon_enable}" = 1 ]; then
		ftp_username=$(get_value ftp_username ${DEFAULT_USER_NAME})
		ftp_usergroup=$(get_value anon_usergroup ${DEFAULT_USER_GROUP})
		ftp_userhome=$(get_value anon_userhome /home/${ftp_username})
		echo "create host user home ${ftp_userhome} for anonymous"
		mkdir -m 0755 -p "${ftp_userhome}"
		chown -R ${ftp_username}:${ftp_usergroup} "${ftp_userhome}"
		export ${ftp_usergroup}=${ftp_usergroup}

		anon_root=$(get_value anon_root)

		conf_append_val anonymous_enable YES
		conf_append_val no_anon_password YES
		conf_translate_val ftp_username
		if [ -n $anon_root ]; then
			mkdir -p "${anon_root}"
			chown -R ${ftp_username}:${ftp_usergroup} "${anon_root}"
			conf_append_val anon_root "${anon_root}"
		fi
		conf_translate_val anon_umask
		conf_translate_val anon_max_rate
		conf_translate_bool anon_world_readable_only
		conf_translate_bool anon_mkdir_write_enable
		conf_translate_bool anon_upload_enable
		conf_translate_bool anon_other_write_enable
	else
		conf_append_val anonymous_enable NO
	fi

	# log
	conf_translate_bool syslog_enable
	conf_translate_bool xferlog_enable
	conf_translate_val vsftpd_log_file
	conf_translate_val xferlog_file
}

add_vuser()
{
	local config=$1
	local name
	local pwd
	local owner
	local home
	local umask
	local maxrate
	local write_enable
	local upload_enable

	echo "parse virtual user: ${config}"
	config_get name $config name
	[ -n "${name}" ] || return 0
	config_get enable $config enable 0
	if [ "$enable" != 1 ]; then
		echo "virtual user ${name} is disabled."
		return 0
	fi
	config_get pwd "$config" pwd "${DEFAULT_VUSER_PWD}"
	ftp_username=$(get_value ftp_username ${DEFAULT_USER_NAME})
	config_get home "$config" home "/home/${ftp_username}"
	config_get umask "$config" umask 022
	config_get maxrate "$config" maxrate 0
	config_get write_enable "$config" write 0
	config_get upload_enable "$config" upload 0
	config_get owner "$config" owner ${DEFAULT_USER_NAME}

	echo "add virtual user: ${name}"
	echo "${name}" >> "${VUSER_LIST}"
	echo "${pwd}" >> "${VUSER_LIST}"

	rm -f "${VUSER_CONF_DIR}/${name}"
	touch "${VUSER_CONF_DIR}/${name}"
	user_append_val "${name}" local_root "$home"

	write_enable=$(bool_2_yesno $write_enable)
	upload_enable=$(bool_2_yesno $upload_enable)
	user_append_val "${name}" write_enable "$write_enable"
	user_append_val "${name}" anon_upload_enable "$upload_enable"

	user_append_val "${name}" anon_world_readable_only NO
	user_append_val "${name}" anon_mkdir_write_enable "$write_enable"
	user_append_val "${name}" write_enable "$write_enable"
	user_append_val "${name}" anon_upload_enable "$upload_enable"
	user_append_val "${name}" anon_umask "$umask"
	user_append_val "${name}" anon_max_rate "$maxrate"

	if [ ! -d "${home}" ] && [ ! -d "$(readlink ${home})" ]; then
		echo "create home ${home} for ${name}"
		echo "chown ${owner}:${ftp_usergroup} ${home}"
		mkdir -p "${home}/uploads"
		chown ${owner}:${ftp_usergroup} "${home}"
		chmod -R a+w "${home}"
		chmod a-w "${home}"
	fi
	# Fixing
	# "500 OOPS: vsftpd: refusing to run with writable root inside chroot()"
	chmod a-w "${home}"
}

add_users()
{
	# virtual user
	vuser_enabled=0
	if [ "$(get_value vuser_enable 0)" = 1 ]; then
		vuser_enabled=1
		conf_append_val guest_enable YES
		guest_username=$(get_value guest_username "${DEFAULT_USER_NAME}")
		conf_append_val guest_username "${guest_username}"
		guest_userhome=$(cat /etc/passwd |grep ${guest_username}|cut -f6 -d:)
		[ -d "${guest_userhome}" ] || {
			echo "create guest_userhome ${guest_userhome} for ${guest_username}"
			mkdir -p "${guest_userhome}"
			chown ${guest_username}:${ftp_usergroup} "${guest_userhome}"
			chmod a-w "${guest_userhome}"
		}

		conf_append_val pam_service_name "${NAME}.vu"
		conf_append_val user_config_dir "${VUSER_CONF_DIR}"

		config_foreach add_vuser user

		db_load -T -t hash -f "${VUSER_LIST}" "${VUSER_DB}.db"
		chmod 600 "${VUSER_DB}.db"
		rm -f "${VUSER_LIST}"

		echo "auth sufficient /lib/security/pam_userdb.so db=${VUSER_DB}" >> "${VUSER_PAM}"
		echo "account sufficient /lib/security/pam_userdb.so db=${VUSER_DB}" >> "${VUSER_PAM}"

		if [ -f "${VUSER_PAM_SYMLINK}" ]; then
			if [ "$(readlink ${VUSER_PAM_SYMLINK})" != "${VUSER_PAM_SYMLINK}" ]; then
				rm -f "${VUSER_PAM_SYMLINK}"
				ln -s "${VUSER_PAM}" "${VUSER_PAM_SYMLINK}"
			fi
		else
			ln -s "${VUSER_PAM}" "${VUSER_PAM_SYMLINK}"
		fi
	fi

	# local user
	conf_append_val secure_chroot_dir "${CHROOT_DIR}"
	conf_translate_val local_root

	if [ "$(get_value local_enable)" = 1 ]; then
		echo "enable local user"
		conf_append_val local_enable YES
		echo "auth required /lib/security/pam_unix.so shadow nullok" >> "${VUSER_PAM}"
		echo "account required /lib/security/pam_unix.so" >> "${VUSER_PAM}"
	else
		if [ ${vuser_enabled} = 1 ]; then
			conf_append_val "local_enable" YES
		else
			conf_append_val "local_enable" NO
		fi
	fi
}

# generate config file
init_config() {
	# prepare
	rm -f "${CONF_FILE}" "${VUSER_LIST}" "${VUSER_DB}.db" "${VUSER_PAM}"
	rm -rf "${VUSER_CONF_DIR}" "${CHROOT_DIR}"
	mkdir -m 0755 -p "${VAR_DIR}"
	mkdir -p "${VUSER_CONF_DIR}"
	mkdir -m 0755 -p "${CHROOT_DIR}"
	touch "${CONF_FILE}" "${VUSER_LIST}" "${VUSER_PAM}"

	# load uci config
	config_load "${NAME}"
	# generate common config
	init_common
	# add users
	add_users
	# user configuration
	user_config_enable=$(get_value user_config_enable 0)
	user_config_file=$(get_value user_config_file ${DEFAULT_USER_CONFIG})
	if [ "${user_config_enable}" = 1 -a -f "${user_config_file}" ]; then
		echo "Apply user config"
		cat "${user_config_file}" "${CONF_FILE}" > "${CONF_FILE}.1"
		awk ' !x[$0]++' "${CONF_FILE}.1" > "${CONF_FILE}"
		rm -f "${CONF_FILE}.1"
	fi
}

start_instance()
{
	local listen_addr
	local addr_type=""

	case $1 in
	ipv6)
		[ "$(get_value enable6 0)" = 1 ] || return 0

		listen_addr=$(get_value listen_addr6 "::")
		addr_type="6"
		listen4="-olisten=NO"
		listen6="-olisten_ipv6=YES"

		echo "start ${NAME} @ ${listen_addr}"
	;;
	*)
		[ "$(get_value enable4 0)" = 1 ] || return 0

		listen_addr=$(get_value listen_addr4 "0.0.0.0")
		listen4="-olisten=YES"
		listen6="-olisten_ipv6=NO"

		echo "start ${NAME} @ ${listen_addr}"
	esac

	# ubus call service list
	procd_open_instance "${NAME}.autogen.$1"
	procd_set_param command "${DAEMON}"
	procd_append_param command "-olisten_address${addr_type}=${listen_addr}" "${listen4}" "${listen6}"
	procd_append_param command "${CONF_FILE}"
	procd_set_param respawn
	procd_set_param pidfile "/var/run/${NAME}.autogen.$1.pid"
	# procd_set_param file "/etc/config/${NAME}"
	procd_close_instance
}

start_service() {
	init_config
	start_instance ipv4
	start_instance ipv6
}

service_triggers() {
	# for `reload_config` or `/etc/init.d/vsftpd reload`
	# "uci-file-name"
	procd_add_reload_trigger "${NAME}"
}
